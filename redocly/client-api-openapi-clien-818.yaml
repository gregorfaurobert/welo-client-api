openapi: "3.0.0"
#set server once this becomes a "real thing"
info:
  title: Client API overview
  license:
    name: Apache 2.0
    url: "www.welocalize.com" # Update once this becomes a "real thing"
  version: "0.1" # Update once this becomes a "real thing"
security:
  - x-pantheon-auth-key: []
components:
  securitySchemes:
    x-pantheon-auth-key:
      description: Generate your token in the auth route.
      name: x-pantheon-auth-key
      type: apiKey
      in: header
paths:
  /v1/client-api/project:
    post:
      operationId: clientApiCreateProject
      summary: Create project
      description: This endpoint makes it easy to create projects based on a few inputs parameters
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: query
          name: projectReferenceId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: Name of the project.
        - in: query
          name: dueDate
          schema:
            type: number
            format: date
          required: false
          description: Date when the project should be completed.
        - in: query
          name: languages
          schema:
            type: array
          required: true
          description: Array with the project's language pairs. Each element of this array is composed of a source language and a target language value.
        - in: query
          name: services
          schema:
            type: array
          required: true
          description: Array with the services ids to be used for the project.
        - in: query
          name: extraProjectInfo
          schema:
            type: object
          required: false
          description: Extra information about the project.
        - in: query
          name: analysis
          schema:
            type: object
          required: false
          description: Project analysis.
      responses:
        "200":
          description: You will receive an object with the project ID.
          content:
            application/json:
              example: { data: { id: number }, meta: {} }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/start:
    put:
      operationId: clientApiStartProject
      summary: Start project
      description: At this endpoint, you can start the project.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an object with a string that says the project has been started successfully.
          content:
            application/json:
              example: { data: String, meta: Object }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/projects:
    get:
      operationId: clientApiProjectList
      summary: Get project list
      description: At this endpoint, you can get all the projects with all data.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
      responses:
        "200":
          description: You will receive an empty object.
          content:
            application/json:
              example:
                {
                  data:
                    [
                      {
                        id: String,
                        status: String,
                        languages: [{ source: String, target: String }],
                        dueDate: Date,
                      },
                    ],
                  meta: Object,
                }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/status:
    get:
      operationId: clientApiProjectStatus
      summary: Get project status
      description: At this endpoint, you can get the project status.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an object with the status of the project in string value. If you specify a projectId that does not exist, it will return an object with an "undefined" value.
          content:
            application/json:
              example: { data: { status: String }, meta: Object }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/file:
    post:
      operationId: clientApiUploadFile
      summary: Upload file
      description: This endpoint can be used to upload the necessary file (Max 2Gb). To do this, the project must already be created. To upload the files, use the “form-data” format in the body of the request.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: query
          name: file
          schema:
            type: object
          required: true
          description: The file you want to use in the project.
        - in: query
          name: asset
          schema:
            type: object
          required: true
          description: Information about the file, such as name, type. In the case of type, you have only two options, “work” or “reference”.
      responses:
        "200":
          description: You will receive an array, where the objects contain file ID and file name.
          content:
            application/json:
              example: { data: [{ id: number, name: string }], meta: {} }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/file/{fileId}:
    delete:
      operationId: clientApiFileDelete
      summary: Delete file
      description: This endpoint can be used to delete files.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: path
          name: fileId
          schema:
            type: number
          required: true
          description: File identifier wants to delete.
      responses:
        "200":
          description: You will receive an object with a string that says the file has been deleted successfully.
          content:
            application/json:
              example: { data: String, meta: Object }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/services:
    get:
      operationId: clientApiListServices
      summary: Get service list
      description: This endpoint returns the list of available services.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
      responses:
        "200":
          description: You will receive an array with identifier and name of each service are available currently.
          content:
            application/json:
              example:
                {
                  data: [{ id: number, serviceName: string }],
                  meta: { count: number },
                }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/deliverables:
    get:
      operationId: clientApiGetDeliverableList
      summary: Get deliverable list
      description: This endpoint returns an array with all deliverable assets available for this project. The array contains items with assetId, assetReference (name of the file uploaded), sourceLocale, targetLocale and type.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: query
          name: targetLocale
          schema:
            type: string
          required: false
          description: Target locale of the deliverable, in Pantheon format.
        - in: query
          name: type
          schema:
            type: string
          required: false
          description: Deliverable type, can be "deliverable" or "deliverable reference".
      responses:
        "200":
          description: You will receive an array with all deliverable assets available that contains data about it.
          content:
            application/json:
              example:
                {
                  data: [{ id: number, assetReference: string , sourceLocale: string , targetLocale: string , type: string }],
                  meta: { count: number },
                }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/deliverable/{deliverableId}:
    get:
      operationId: clientApiGetDeliverable
      summary: Get deliverable file
      description: In this endpoint, we can download the data of a deliverable asset of a given project.
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: path
          name: deliverableId
          schema:
            type: number
          required: true
          description: Identifier of asset.
      responses:
        "200":
          description: If the project deliverable is a hyperlink, it returns "url", "name", "id", otherwise it returns a file stream.
          content:
            application/json:
              example: { data: object, meta: {} }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/files:
    get:
      operationId: clientApiGetAssetList
      summary: Get asset list by project
      description: In this endpoint returns a list of assets associated to a project
      parameters:
        - in: header
          name: x-pantheon-auth-key
          schema:
            type: string
          required: true
          description: The auth key to use to authenticate the request
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an array with assets that contains data about it.
          content:
            application/json:
              example:
                {
                  data:
                    [
                      {
                        id: number,
                        assetReference: string,
                        source: string,
                        target: string,
                      },
                    ],
                  meta: { count: number },
                }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
