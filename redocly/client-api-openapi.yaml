openapi: "3.0.0"
#set server once this becomes a "real thing"
servers:
  - url: 'https://hypnos.welocalize.tools'
info:
  title: Welocalize Client API Documentation
  description: Welcome on the <b>Welocalize Client API</b> documentation site. <br/>Here you will find information on how to create, monitor translation requests to Welocalize and retrieve the localized content. <br/><br/>You can reach out to your Welocalize contact to get your authentication key or use the <a href="https://welocalize.com/contact-us/" target="_blank">contact form</a> to get in touch with us.
  license:
    name: Apache 2.0
    url: "www.welocalize.com" # Update once this becomes a "real thing"
  version: "0.2" # Update once this becomes a "real thing"
  x-logo:
    url: 'https://www.gala-global.org/sites/default/files/Welocalize_94.jpg'
    altText: welocalize logo
security:
  - x-pantheon-auth-key: []
components:
  securitySchemes:
    x-pantheon-auth-key:
      description: The auth key to use to authenticate the request. The key is generated by Welocalize and associated to a specific account's program. Reach out to your welocalize contact to get your key.
      name: x-pantheon-auth-key
      schema:
        type: string
      in: header
      required: true
paths:
  /v1/authentication-token/info:
    get:
      operationId: authenticationTokenInfo
      summary: Get authentication token info.
      description: This endpoint returns the information about the authentication token such as creation date, expiration date, etc.
      responses:
        "200":
          description: Returns an object with the authentication token information.
          content:
            application/json:
              example: { data: { expirationDate: 2024-01-01T00:00:00.000Z, createdAt: 2024-01-01T00:00:00.000Z, version: 2, scope: {platformInstanceId: 123} }, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/authentication-token/refresh/:
    put:
      operationId: refreshMyAuthenticationToken
      summary: Refresh my authentication token
      description: This endpoint can be used to refresh your authentication token.
      responses:
        "200":
          description: Returns an object with the authentication token information.
          content:
            application/json:
              example: { data: { expirationDate: 2024-01-01T00:00:00.000Z, createdAt: 2024-01-01T00:00:00.000Z, version: 2, scope: {platformInstanceId: 123} }, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { message: Unauthorized}
        "422":
          description: User authentication token has more than 48 hours left until it expires.
          content:
            application/json:
              example: { message: User authentication token has more than 48 hours left until it expires. }
  /v1/client-api/services:
    get:
      operationId: clientApiListServices
      summary: Get service list
      description: This endpoint returns the list of available services.
      responses:
        "200":
          description: Returns an array containing the ID and name of each available service.
          content:
            application/json:
              example:
                {
                  data: [{ id: 1, serviceName: Standard Translation }, { id: 2, serviceName: In-Context Review}],
                  meta: { count: 2 },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { data: Bad Request, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/project:
    post:
      operationId: clientApiCreateProject
      summary: Create project
      description: This endpoint makes it easy to create projects based on a few inputs parameters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - projectReferenceId
                - name
                - languages
                - services
              properties:
                projectReferenceId:
                  type: string
                  description: Project identifier. Must be unique.
                name:
                  type: string
                  description: Name of the project.
                dueDate:
                  type: string
                  format: date
                  description: Date when the project should be completed.
                languages:
                  type: array
                  description: Array with the project's language pairs. Each element of this array is composed of a source language and a target language value.
                  items:
                    type: object
                    properties:
                      source:
                        type: string
                      target:
                        type: string
                services:
                  type: array
                  description: Array with the services ids to be used for the project.
                extraProjectInfo:
                  type: object
                  description: Extra information about the project. You can add any object or array.
                analysis:
                  type: array
                  description: Here you can pass the TMS file analysis
                  items:
                    type: object
                    properties:
                      targetLocale:
                        type: array
                        description: The target locale of the analysis
                        items:
                          type: object
                          properties:
                            analysisBucketType:
                              type: string
                              description: The type of analysis bucket
            example:
              projectReferenceId: "12345"
              name: "New Project"
              dueDate: "2024-12-31"
              languages:
                - source: "en-US"
                  target: "fr-FR"
                - source: "en-US"
                  target: "de-DE"
              services:
                - id: "6"
              extraProjectInfo:
                instructions: "This is a set of Instructions"
                priority: "standard"
                preapprovedProject: true
              analysis:
                  fr-FR:
                    iceMatches: 0
                    repetitions: 5
                    oneHundred: 10
                    ninetyFive: 15
                    eightyFive: 20
                    seventyFive: 25
                    newWords: 30
                  de-DE:
                    iceMatches: 0
                    repetitions: 5
                    oneHundred: 10
                    ninetyFive: 15
                    eightyFive: 20
                    seventyFive: 25
                    newWords: 30
      responses:
        "200":
          description: You will receive an object with the project ID.
          content:
            application/json:
              example: { data: { id: 1234567 }, meta: {} }
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                Bad request: {status: 400, messages: Bad Request}
                Requested Service is not available: {status: 400, messages: These services ids are not available in our system}
        "401":
          description: Authentication errors, including unauthorized or token expiration.
          content:
            application/json:
              example:
                Unauthorized: {status: 401, message: Unauthorized}
                Auth Token Expired: {status: 401, message: Auth Token Expired}
  /v1/client-api/project/{projectId}/file:
    post:
      operationId: clientApiUploadFile
      summary: Upload file
      description: This endpoint can be used to upload the necessary file (Max 2Gb). To do this, the project must already be created. To upload the files, use the “form-data” format in the body of the request.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - file
                - asset
              properties:
                file:
                  type: string
                  description: The file you want to upload in the project.
                asset:
                  type: object
                  description: Information about the file, such as name, type. In the case of type, you have only two options, “work” or “reference”.
                  properties:
                    name:
                      type: string
                      description: The name of the file.
                    type:
                      type: string
                      description: Either work or reference
            example:
              file: file.txt
              asset:
                name: "A File Text"
                type: work
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an array, where the objects contain file ID and file name.
          content:
            application/json:
              example: { data: [{ id: 12324567, name: "A File Text " }], meta: {} }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { data: Bad Request, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/project/{projectId}/file/{fileId}:
    delete:
      operationId: clientApiFileDelete
      summary: Delete file
      description: This endpoint can be used to delete files.
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: path
          name: fileId
          schema:
            type: number
          required: true
          description: File identifier wants to delete.
      responses:
        "200":
          description: You will receive an object with a string that says the file has been deleted successfully.
          content:
            application/json:
              example: { data: Success file deleted, meta: {} }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { message: This file does not exist}
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/project/{projectId}/start:
    put:
      operationId: clientApiStartProject
      summary: Start project
      description: Initiates the translation process for the specified project.
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an object with a string that says the project has been started successfully.
          content:
            application/json:
              example: { data: Project started successfully, meta: {} }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { data: Bad Request, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/projects:
    get:
      operationId: clientApiProjectList
      summary: Get project list
      description: At this endpoint, you can get all the projects with all data.
      responses:
        "200":
          description: You will receive an empty object.
          content:
            application/json:
              example:
                {
                  data:
                    [
                      {
                        id: 1234567,
                        status: comnpleted,
                        languages: [{ source: en-US, target: fr-FR }],
                        dueDate: 2024-12-31T00:00:00.000Z
                      },
                      {
                        id: 89012345,
                        status: in progress,
                        languages: [{ source: en-US, target: es-ES }],
                        dueDate: 2025-03-31T00:00:00.000Z
                      },
                    ],
                  meta: 2,
                }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { data: Bad Request, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/project/{projectId}/status:
    get:
      operationId: clientApiProjectStatus
      summary: Get project status
      description: At this endpoint, you can get the project status. <br/><table><tr><th>Project Status</th><th>Description</th></tr><tr><td>processing</td><td>The project is being processed.</td></tr><tr><td>created</td><td>The project has been successfully created.</td></tr><tr><td>in scoping</td><td>The project is in scoping.</td></tr><tr><td>in progress</td><td>The project is in progress.</td></tr><tr><td>delivery in progress</td><td>The project is in delivery progress.</td></tr><tr><td>completed</td><td>The project has been completed. Deliverables are ready.</td></tr></table><br/><table><tr><th>Exception Status</th><th>Description</th></tr><tr><td>error</td><td>The project has an error.</td></tr><tr><td>cancelled</td><td>Upon bilateral decision the project has been cancelled.</td></tr><tr><td>hold</td><td>The project is on hold. Awaiting further instructions from the client.</td></tr><tr><td>lost</td><td>Upon quote rejection, the project has been lost.</td></tr><tr><td>ignored</td><td>Upon bilateral decision, the project has been ignored.</td></tr></table>
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an object with the status of the project in string value. If you specify a projectId that does not exist, it will return an object with an "undefined" value.
          content:
            application/json:
              example: { data: { status: in scoping }, meta: {} }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /v1/client-api/project/{projectId}/deliverables:
    get:
      operationId: clientApiGetDeliverableList
      summary: Get deliverable list
      description: This endpoint returns an array with all deliverable assets available for this project. The array contains items with assetId and assetReference (name of the file uploaded).
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an array with all deliverable assets available that contains data about it.
          content:
            application/json:
              example:
                {
                  data: [{ id: 0123456789, assetReference: file.txt, sourceLocale: en-US, targetLocale: fr-FR, type: work }],
                  meta: { count: 1 },
                }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { data: Bad Request, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/project/{projectId}/deliverable/{deliverableId}:
    get:
      operationId: clientApiGetDeliverable
      summary: Get deliverable file
      description: In this endpoint, we can download the data of a deliverable asset of a given project.
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
        - in: path
          name: deliverableId
          schema:
            type: number
          required: true
          description: Identifier of asset.
      responses:
        "200":
          description: If the project deliverable is a hyperlink, it returns "url", "name", "id", otherwise it returns a file stream.
          content:
            application/json:
              example: { data: {id: 0123456789, url: https://www.example.com, name: Deliverable File}, meta: {count: 1} }
        "400":
          description: Bad Request
          content:
            application/json:
              example: { data: Bad Request, meta: {} }
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { data: Unauthorized, meta: {} }
  /v1/client-api/project/{projectId}/files:
    get:
      operationId: clientApiGetAssetList
      summary: Get asset list by project
      description: In this endpoint returns a list of assets associated to a project. <br/> <table><tr><th>Assets Types</th></tr><tr><td>Work</td></tr><tr><td>Reference</td></tr><tr><td>Deliverable</td></tr><tr><td>Deliverable Reference</td></tr></table>
      parameters:
        - in: path
          name: projectId
          schema:
            type: number
          required: true
          description: Project identifier. Must be unique.
      responses:
        "200":
          description: You will receive an array with assets that contains data about it.
          content:
            application/json:
              example:
                {
                  data:
                    [
                      {
                        id: 0123456789,
                        assetReference: file.txt,
                        source: en-US,
                        target: fr-FR,
                        type: work
                      },
                      {
                        id: 0123456789,
                        assetReference: glossary.csv,
                        source: en-US,
                        target: fr-FR,
                        type: reference
                      },
                      {
                        id: 0123456789,
                        assetReference: deliverable.docx,
                        source: en-US,
                        target: fr-FR,
                        type: deliverable
                      },
                      {
                        id: 0123456789,
                        assetReference: deliverable_reference.docx,
                        source: en-US,
                        target: fr-FR,
                        type: deliverable reference
                      }
                    ],
                  meta: { count: 4 },
                }
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
